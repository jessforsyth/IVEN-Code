close all 
clear all
clc

%This script helps extract data from output nbr files from IVEN. You can
%edit this file for your needs, we use it to help identify mural, polar TE
%and quickly compile data ready for anlaysis. It is crude with no advanced
%analysis, but make copying data from lots of files quicker and easier. 
%Feel free to edit however you would like! :)

%Type the number of headings rows your data has
headings=1;

[file,path]=uigetfile('*.*','MultiSelect','on'); %This line opens a file directory window to allow you to select the files you would like to copile/post-process

if class(file)=='char'  %if you have selected multiple files, then file with be in format char, must reshape
    file=reshape(file,[size(file),1])
    file=cellstr(file);
end
num_files=length(file); 

[arrays]=intialise_arrays(num_files);

warningid='MATLAB:table:ModifiedAndSavedVarnames';
warning('off',warningid);
fprintf('Compiling files.......\n')

all_ins=NaN(1000,num_files); %check that the number of cells within a population does not exceed 1000
all_mte=NaN(1000,num_files);
all_pte=NaN(1000,num_files);

for file_num=1:num_files
    fprintf('File %d out of %d : ',file_num,num_files)
    fprintf([file{file_num},'\n'])                 %this displays the filename for reference
    fname=fullfile(path,file{file_num});           %stitch file and path 
    tabletemp=readtable(fname);
    table=table2array(tabletemp(:,1:end-1),'PreserveVariableNames','True'); %read in data from excel spreadsheet
    s=size(table);
    num_cells=s(1);                      %calculate the number of cells in the dataset
    
    arrays.cell_numbers(file_num,1)=num_cells;
    
    [~,order]=sort(table(:,1));
    table=table(order,:);
    
    %Python extraction  
    %if you are extracting data from files generated by python use this
    %[~,~,~,~,~,~,~,~,~,~,~,OUT,nbrs_new,nbr_comp,~]=import_nbr_file_python(table,headings);
    
    %matlab extraction
    %if you are extracting data from files generated by matlab use this
    [~,~,~,~,~,~,~,~,~,~,~,OUT,nbrs_old,nbrs_new,nbr_comp,~]=import_nbr_file(table,headings);
    
    ins_nbrs=[];
    out_nbrs=[];
    mu_nbrs=[];
    po_nbrs=[];
    num_mu=0;
    num_po=0;
    num_out=0;
    num_ins=0;
    
    for i=1:num_cells

        if OUT(i)==0
            num_ins=num_ins+1;
            arrays.all_INS=[arrays.all_INS;nbrs_new(i)];
            ins_nbrs=[ins_nbrs;nbrs_new(i)];
            arrays.comp_INS=[arrays.comp_INS;(100*((nbrs_new(i)-nbr_comp(i))/nbrs_new(i)))];
        else
            num_out=num_out+1;
            arrays.all_OUT=[arrays.all_OUT;nbrs_new(i)];
            out_nbrs=[out_nbrs;nbrs_new(i)];
            arrays.comp_OUT=[arrays.comp_OUT;(100*(nbr_comp(i)/nbrs_new(i)))];

            if (nbr_comp(i)/nbrs_new(i))==1
                num_mu=num_mu+1;
                mu_nbrs=[mu_nbrs;nbrs_new(i)];
                arrays.mu_TE=[arrays.mu_TE;nbrs_new(i)];
            else
                num_po=num_po+1;
                po_nbrs=[po_nbrs;nbrs_new(i)];
                arrays.po_TE=[arrays.po_TE;nbrs_new(i)];
            end

        end
    end
 
    all_ins(1:num_ins,file_num)=ins_nbrs;
    all_mte(1:num_mu,file_num)=mu_nbrs;
    all_pte(1:num_po,file_num)=po_nbrs;     
    
    arrays.num_mural=[arrays.num_mural;num_mu];
    arrays.perc_mural=[arrays.perc_mural;100*(num_mu/num_out)];

    arrays.avg_INS(file_num,1)=mean(ins_nbrs);
    arrays.avg_OUT(file_num,1)=mean(out_nbrs);
    
end
fprintf('All files compiled. \n')

